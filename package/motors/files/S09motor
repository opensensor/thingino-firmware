#!/bin/sh

gpio_motor_h=$(fw_printenv -n gpio_motor_h)
gpio_motor_v=$(fw_printenv -n gpio_motor_v)
motor_h_maxstep=$(fw_printenv -n motor_maxstep_h)
motor_v_maxstep=$(fw_printenv -n motor_maxstep_v)

check_return() {
	if [ $1 -ne 0 ]; then
		echo "err: $2"
		exit 1
	fi
}

check_module() {
	for module in "$@"; do
		if grep -qE "^$module" /proc/modules; then
			echo "Module ${module} already loaded."
			exit 0
		fi
	done
}

set_gpio_vars() {
	local gpio_string=$1
	local motor_type=$2
	local i=1

	for gpio in $gpio_string; do
		eval "${motor_type}st${i}=${gpio}"
		i=$((i + 1))
	done

	if [ $i -ne 5 ]; then
		echo "Missing phase for ${motor_type} motor. Cannot load motor module."
		exit 1
	fi
}

start() {
	echo -n "Starting motor: "
	# Check if motors are supported
	if [ -z "$gpio_motor_h" ] || [ -z "$gpio_motor_v" ]; then
		echo "DISABLED"
		exit 0
	fi

	# Check for errors after caching command results
	check_return $? "Failed to get initial configuration"

	# Set GPIO variables
	set_gpio_vars "$gpio_motor_h" "h"
	check_return $? "Failed to set horizontal GPIO variables"

	set_gpio_vars "$gpio_motor_v" "v"
	check_return $? "Failed to set vertical GPIO variables"

	# Check if the module is already loaded
	check_module motor sample_motor

	modprobe motor hmaxstep=$motor_h_maxstep vmaxstep=$motor_v_maxstep \
		hst1=$hst1 hst2=$hst2 hst3=$hst3 hst4=$hst4 \
		vst1=$vst1 vst2=$vst2 vst3=$vst3 vst4=$vst4
	check_return $? "Failed to load motor module for ingenic"
	echo "OK"
	# Initialize motor position upon successful module loading
	motors -r > /dev/null 2>&1 &
}

case "$1" in
	start)
		start
		;;
	stop | restart | reload)
		# Implement logic if needed
		true
		;;
	*)
		echo "Usage: $0 {start|stop|restart|reload}"
		exit 1
		;;
esac

exit 0
