
--- a/common/lcd.c	2013-07-23 07:58:13.000000000 -0400
+++ b/common/lcd.c	2023-07-26 11:31:38.000000000 -0400
@@ -69,15 +69,22 @@
 #include <video_font.h>		/* Get font data, width and height	*/
 #include <video_font_data.h>
 
+
 /************************************************************************/
 /* ** LOGO DATA								*/
 /************************************************************************/
 #ifdef CONFIG_LCD_LOGO
+#ifdef CONFIG_RLE_LCD_LOGO
+#include <rle_logo.h>
+#else
 # include <bmp_logo.h>		/* Get logo data, width and height	*/
 # include <bmp_logo_data.h>
+/*the new uboot do not support jzfb format
 # if (CONSOLE_COLOR_WHITE >= BMP_LOGO_OFFSET) && (LCD_BPP != LCD_COLOR16)
 #  error Default Color Map overlaps with Logo Color Map
 # endif
+*/
+#endif
 #endif
 
 #ifndef CONFIG_LCD_ALIGNMENT
@@ -111,7 +118,7 @@
 #if LCD_BPP == LCD_MONOCHROME
 # define COLOR_MASK(c)		((c)	  | (c) << 1 | (c) << 2 | (c) << 3 | \
 				 (c) << 4 | (c) << 5 | (c) << 6 | (c) << 7)
-#elif (LCD_BPP == LCD_COLOR8) || (LCD_BPP == LCD_COLOR16)
+#elif (LCD_BPP == LCD_COLOR8) || (LCD_BPP == LCD_COLOR16 || (LCD_BPP == LCD_COLOR32))
 # define COLOR_MASK(c)		(c)
 #else
 # error Unsupported LCD BPP.
@@ -144,6 +151,7 @@
 static void *lcd_base;			/* Start of framebuffer memory	*/
 
 static char lcd_flush_dcache;	/* 1 to flush dcache after each lcd update */
+extern int flush_cache_all(void);
 
 /************************************************************************/
 
@@ -155,7 +163,7 @@
 	 * architectures do not actually implement it. Is there a way to find
 	 * out whether it exists? For now, ARM is safe.
 	 */
-#if defined(CONFIG_ARM) && !defined(CONFIG_SYS_DCACHE_OFF)
+#if defined(CONFIG_ARM) && !defined(CONFIG_SYS_DCACHE_OFF) || defined(CONFIG_MIPS32)
 	int line_length;
 
 	if (lcd_flush_dcache)
@@ -173,6 +181,7 @@
 
 static void console_scrollup(void)
 {
+	/*rows is the number of row we will move,default 1*/
 	const int rows = CONFIG_CONSOLE_SCROLL_LINES;
 
 	/* Copy up rows ignoring those that will be overwritten */
@@ -186,6 +195,7 @@
 		CONSOLE_ROW_SIZE * rows);
 
 	lcd_sync();
+	/*console_row is the number of rest rows*/
 	console_row -= rows;
 }
 
@@ -220,11 +230,14 @@
 
 void lcd_putc(const char c)
 {
-	if (!lcd_is_enabled) {
-		serial_putc(c);
+	serial_putc(c);
 
+	if (!lcd_is_enabled) {
 		return;
 	}
+/*the rest of lcd do not display a line console*/
+if ( BMP_LOGO_HEIGHT > (panel_info.vl_row - 2*VIDEO_FONT_HEIGHT))
+		return ;
 
 	switch (c) {
 	case '\r':
@@ -341,12 +354,22 @@
 						lcd_color_fg : lcd_color_bg;
 				bits <<= 1;
 			}
+#elif LCD_BPP == LCD_COLOR32
+			uint *m = (uint *)d;
+			for (c=0; c< 8 ; ++c) {
+				*m++ = (bits & 0x80) ?
+					lcd_color_fg : lcd_color_bg;
+				d+=4;
+				bits <<= 1;
+			}
 #endif
 		}
 #if LCD_BPP == LCD_MONOCHROME
 		*d  = rest | (*d & ((1 << (8 - off)) - 1));
 #endif
 	}
+	        flush_cache_all();
+
 }
 
 /*----------------------------------------------------------------------*/
@@ -434,6 +457,27 @@
 }
 
 /*----------------------------------------------------------------------*/
+void lcd_clear_black(void)
+{
+	unsigned int i;
+	int *lcdbase_p = (int *) gd->fb_base;
+        int *p = malloc(panel_info.vl_col * panel_info.vl_row * 4);
+        if(p == NULL)
+                return ;
+
+        memset(p, 0, panel_info.vl_col * panel_info.vl_row * 4);
+        fb_fill(p, lcd_base, panel_info.vl_col * panel_info.vl_row * 4);
+        lcd_sync();
+        free(p);
+#if 0
+	int *lcdbase_p = (int *) gd->fb_base;
+	for (i = 0; i < lcd_line_length * panel_info.vl_row / 4; i++) {
+		*lcdbase_p++ = 0x0;
+	}
+#endif
+}
+
+/*----------------------------------------------------------------------*/
 void lcd_clear(void)
 {
 #if LCD_BPP == LCD_MONOCHROME
@@ -465,10 +509,29 @@
 	test_pattern();
 #else
 	/* set framebuffer to background color */
-	memset((char *)lcd_base,
+	/*
+	memset ((char *)lcd_base,
 		COLOR_MASK(lcd_getbgcolor()),
 		lcd_line_length * panel_info.vl_row);
+	*/
+#if LCD_BPP == LCD_COLOR16
+	long long i;
+	short *lcdbase_p = (short *)lcd_base;
+	for(i=0;i<lcd_line_length*panel_info.vl_row/2;i++)
+		*lcdbase_p++ = COLOR_MASK(lcd_getbgcolor());
+
+#elif LCD_BPP == LCD_COLOR32
+	long long i;
+	int *lcdbase_p = (int *)lcd_base;
+	for(i=0;i<lcd_line_length*panel_info.vl_row/4;i++)
+		*lcdbase_p++ = COLOR_MASK(lcd_getbgcolor());
+#else
+	memset ((char *)lcd_base,
+		COLOR_MASK(lcd_getbgcolor()),
+		lcd_line_length*panel_info.vl_row);
+#endif
 #endif
+
 	/* Paint the logo and retrieve LCD base address */
 	debug("[LCD] Drawing the logo...\n");
 	lcd_console_address = lcd_logo();
@@ -514,16 +577,18 @@
 	lcd_get_size(&lcd_line_length);
 	lcd_line_length = (panel_info.vl_col * NBITS(panel_info.vl_bpix)) / 8;
 	lcd_is_enabled = 1;
+
 	lcd_clear();
 	lcd_enable();
 
 	/* Initialize the console */
 	console_col = 0;
 #ifdef CONFIG_LCD_INFO_BELOW_LOGO
-	console_row = 7 + BMP_LOGO_HEIGHT / VIDEO_FONT_HEIGHT;
+	console_row = 1 + BMP_LOGO_HEIGHT / VIDEO_FONT_HEIGHT;
 #else
 	console_row = 1;	/* leave 1 blank line below logo */
 #endif
+	lcd_is_enabled = 1;
 
 	return 0;
 }
@@ -548,14 +613,11 @@
 		panel_info.vl_row, NBITS(panel_info.vl_bpix));
 
 	size = lcd_get_size(&line_length);
-
 	/* Round up to nearest full page, or MMU section if defined */
-	size = ALIGN(size, CONFIG_LCD_ALIGNMENT);
-	addr = ALIGN(addr - CONFIG_LCD_ALIGNMENT + 1, CONFIG_LCD_ALIGNMENT);
+	 size = (size + PAGE_SIZE + (PAGE_SIZE - 1)) & ~(PAGE_SIZE - 1);
 
 	/* Allocate pages for the frame buffer. */
 	addr -= size;
-
 	debug("Reserving %ldk for LCD Framebuffer at: %08lx\n",
 	      size >> 10, addr);
 
@@ -613,7 +675,7 @@
 #endif
 }
 
-#ifdef CONFIG_LCD_LOGO
+#if defined (CONFIG_LCD_LOGO) && !defined (CONFIG_RLE_LCD_LOGO)
 void bitmap_plot(int x, int y)
 {
 #ifdef CONFIG_ATMEL_LCD
@@ -622,9 +684,14 @@
 	ushort *cmap = (ushort *)bmp_logo_palette;
 #endif
 	ushort i, j;
-	uchar *bmap;
+#if (BMP_LOGO_NBIT == 24)
+	unsigned int *bmap;
+#else
+	unsigned char *bmap;
+#endif
 	uchar *fb;
 	ushort *fb16;
+	uint *fb32;
 #if defined(CONFIG_MPC823)
 	immap_t *immr = (immap_t *) CONFIG_SYS_IMMR;
 	cpm8xx_t *cp = &(immr->im_cpm);
@@ -688,19 +755,45 @@
 		}
 	}
 	else { /* true color mode */
-		u16 col16;
-		fb16 = (ushort *)fb;
-		for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
-			for (j = 0; j < BMP_LOGO_WIDTH; j++) {
-				col16 = bmp_logo_palette[(bmap[j]-16)];
-				fb16[j] =
-					((col16 & 0x000F) << 1) |
-					((col16 & 0x00F0) << 3) |
-					((col16 & 0x0F00) << 4);
+		if(NBITS(panel_info.vl_bpix) == 16){
+			u16 col16;
+			fb16 = (ushort *)fb;
+			for (i = 0; i < BMP_LOGO_HEIGHT; ++i) {
+				for (j = 0; j < BMP_LOGO_WIDTH; j++) {
+					col16 = bmp_logo_palette[(bmap[j]-16)];
+					fb16[j] =
+						((col16 & 0x000F) << 1) |
+						((col16 & 0x00F0) << 3) |
+						((col16 & 0x0F00) << 4);
+					}
+				bmap += BMP_LOGO_WIDTH;
+				fb16 += panel_info.vl_col;
+			}
+		}
+		else if (NBITS(panel_info.vl_bpix) == 32){
+			u16 col16;
+			fb32 = (uint *)(lcd_base + y * lcd_line_length + x);
+
+			for (i=0; i<BMP_LOGO_HEIGHT; ++i) {
+
+				for (j=0; j<BMP_LOGO_WIDTH; j++) {
+					col16 = bmp_logo_palette[(bmap[j]-16)];
+					/*the bitmap is 12bit,4bit each color.we should change the 12bit to 24bit(888)*/
+#if (BMP_LOGO_NBIT == 24)
+					fb32[j] = bmp_logo_bitmap[BMP_LOGO_WIDTH * (BMP_LOGO_HEIGHT - i - 1) + j];
+#else
+					fb32[j] =
+						((col16 & 0x000F) << 4) |
+						((col16 & 0x00F0) << 8) |
+						((col16 & 0x0F00) << 12);
+#endif
 				}
-			bmap += BMP_LOGO_WIDTH;
-			fb16 += panel_info.vl_col;
+				bmap += BMP_LOGO_WIDTH;
+				fb32 += panel_info.vl_col;
+			}
 		}
+		else
+			printf("The U-boot do not support this bpix!\n");
 	}
 
 	WATCHDOG_RESET();
@@ -891,6 +984,7 @@
 #endif
 #endif /* CONFIG_BMP_16BPP */
 
+
 int lcd_display_bitmap(ulong bmp_image, int x, int y)
 {
 #if !defined(CONFIG_MCC200)
@@ -927,14 +1021,14 @@
 		return 1;
 	}
 
-	/* We support displaying 8bpp BMPs on 16bpp LCDs */
-	if (bpix != bmp_bpix && !(bmp_bpix == 8 && bpix == 16)) {
-		printf ("Error: %d bit/pixel mode, but BMP has %d bit/pixel\n",
-			bpix,
-			le16_to_cpu(bmp->header.bit_count));
-
-		return 1;
-	}
+        /* We support displaying 8bpp(16bpp、24bpp、32bpp) BMPs on 16bpp or 32bpp LCDs */
+        if (bpix != bmp_bpix && !(((bmp_bpix == 8) || (bmp_bpix == 16)
+                                        || (bmp_bpix == 24) || (bmp_bpix == 32))
+                                        && ((bpix == 16) ||(bpix ==32)))) {
+                printf ("Error: %d bit/pixel mode, but BMP has %d bit/pixel\n",
+                                bpix,le16_to_cpu(bmp->header.bit_count));
+                return 1;
+        }
 
 	debug("Display-bmp: %d x %d  with %d colors\n",
 		(int)width, (int)height, (int)colors);
@@ -1023,57 +1117,105 @@
 			byte_width = width;
 		else
 			byte_width = width * 2;
-
 		for (i = 0; i < height; ++i) {
 			WATCHDOG_RESET();
 			for (j = 0; j < width; j++) {
-				if (bpix != 16) {
-					FB_PUT_BYTE(fb, bmap);
-				} else {
+				if (bpix == 16) {
 					*(uint16_t *)fb = cmap_base[*(bmap++)];
 					fb += sizeof(uint16_t) / sizeof(*fb);
+				}else if(bpix == 32){
+					*(uint32_t *)fb =(((cmap_base[*(bmap)]&0x001f) << 3) |
+							((cmap_base[*(bmap)]&0x07e0) << 5) |
+							((cmap_base[*(bmap)]&0xf800) << 8));
+					bmap++;
+					fb += (sizeof(uint32_t) / sizeof(*fb));
 				}
-			}
+				else {
+					FB_PUT_BYTE(fb, bmap);
+				}
+
+			}//end for
 			bmap += (padded_width - width);
-			fb -= byte_width + lcd_line_length;
-		}
+			fb -= lcd_line_length + byte_width*(bpix/8);
+		}//end for
+
 		break;
 
-#if defined(CONFIG_BMP_16BPP)
 	case 16:
 		for (i = 0; i < height; ++i) {
 			WATCHDOG_RESET();
-			for (j = 0; j < width; j++)
-				fb_put_word(&fb, &bmap);
+			for (j = 0; j < width; j++){
+				uchar first_byte = *(bmap++);
+				uchar second_byte = *(bmap++);
+				uint32_t color = (second_byte << 8) | first_byte;
+				*(uint32_t *)fb = ((color & 0xf800) << 8)|
+					((color & 0x07e0) << 5)|
+					((color & 0x001f) << 3);
+				fb += (sizeof(uint32_t) / sizeof(*fb));
+			}
+			fb -= lcd_line_length + width * (bpix / 8);
+		}//end for
 
-			bmap += (padded_width - width) * 2;
-			fb -= width * 2 + lcd_line_length;
-		}
 		break;
-#endif /* CONFIG_BMP_16BPP */
+	case 24:
+		for(i = 0; i < height; ++i){
+			WATCHDOG_RESET();
+			for(j = 0; j < width; j++){
+				*(fb++) = *(bmap++);
+				*(fb++) = *(bmap++);
+				*(fb++) = *(bmap++);
+				fb++;
+			}//end for
+			fb -= lcd_line_length + width*(bpix/8);
+		}//end for
+		break;
 
-#if defined(CONFIG_BMP_32BPP)
 	case 32:
 		for (i = 0; i < height; ++i) {
+			WATCHDOG_RESET();
 			for (j = 0; j < width; j++) {
 				*(fb++) = *(bmap++);
 				*(fb++) = *(bmap++);
 				*(fb++) = *(bmap++);
 				*(fb++) = *(bmap++);
-			}
+			}//end for
 			fb -= lcd_line_length + width * (bpix / 8);
-		}
+		}//end for
+
 		break;
-#endif /* CONFIG_BMP_32BPP */
 	default:
 		break;
-	};
+	};//end switch
 
 	lcd_sync();
 	return 0;
-}
+}//end lcd_display_bitmap
 #endif
 
+#ifdef CONFIG_CMD_LOGO_RLE
+int  lcd_display_rle(unsigned short *src_buf)
+{
+	if(src_buf == NULL )
+		return -1;
+	lcd_is_enabled = 0;
+	lcd_clear_black();
+	rle_plot(src_buf, lcd_base);
+	lcd_sync();
+	return 0;
+}
+
+int  lcd_console_enable(int val)
+{
+	lcd_console_address = (void *)gd->fb_base;
+	console_row = 1;
+	console_col = 0;
+
+	lcd_clear_black();
+	lcd_is_enabled = val ? 1 : 0;
+	return 0;
+}
+
+#endif
 static void *lcd_logo(void)
 {
 #ifdef CONFIG_SPLASH_SCREEN
@@ -1097,8 +1239,12 @@
 	}
 #endif /* CONFIG_SPLASH_SCREEN */
 
+#if defined(CONFIG_RLE_LCD_LOGO) && !defined(CONFIG_LCD_INFO_BELOW_LOGO)
+	rle_plot(RLE_LOGO_DEFAULT_ADDR, lcd_base);
+#else
 	bitmap_plot(0, 0);
-
+#endif
+	flush_cache_all();
 #ifdef CONFIG_LCD_INFO
 	console_col = LCD_INFO_X / VIDEO_FONT_WIDTH;
 	console_row = LCD_INFO_Y / VIDEO_FONT_HEIGHT;
