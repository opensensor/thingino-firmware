
--- a/common/spl/spl_mmc.c	2013-07-23 07:58:13.000000000 -0400
+++ b/common/spl/spl_mmc.c	2023-07-26 11:31:38.000000000 -0400
@@ -25,19 +25,24 @@
 #include <common.h>
 #include <spl.h>
 #include <asm/u-boot.h>
-#include <asm/utils.h>
 #include <mmc.h>
 #include <fat.h>
 #include <version.h>
+#include <linux/lzo.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
 static int mmc_load_image_raw(struct mmc *mmc, unsigned long sector)
 {
+	size_t dst_len;
 	unsigned long err;
 	u32 image_size_sectors;
 	struct image_header *header;
 
+#ifdef CONFIG_SUPPORT_EMMC_BOOT
+	mmc_boot_part_access(mmc, 0x1, 0x1, 0x1);
+#endif
+
 	header = (struct image_header *)(CONFIG_SYS_TEXT_BASE -
 						sizeof(struct image_header));
 
@@ -51,14 +56,25 @@
 	/* convert size to sectors - round up */
 	image_size_sectors = (spl_image.size + mmc->read_bl_len - 1) /
 				mmc->read_bl_len;
-
+#ifdef CONFIG_SPL_LZOP
+	err = mmc->block_dev.block_read(0, sector, image_size_sectors,
+					(void *)CONFIG_DECMP_BUFFER_ADRS);
+	lzop_decompress((unsigned char *)(CONFIG_DECMP_BUFFER_ADRS+0x40),(size_t)spl_image.size-0x40,
+			(unsigned char *)CONFIG_SYS_TEXT_BASE,&dst_len);
+#else
 	/* Read the header too to avoid extra memcpy */
 	err = mmc->block_dev.block_read(0, sector, image_size_sectors,
 					(void *)spl_image.load_addr);
-
+#endif
 end:
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 	if (err == 0)
 		printf("spl: mmc blk read err - %lu\n", err);
+#endif
+
+#ifdef CONFIG_SUPPORT_EMMC_BOOT
+	mmc_boot_part_access(mmc, 0x1, 0x1, 0x0);
+#endif
 
 	return (err == 0);
 }
@@ -70,7 +86,9 @@
 				       CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTOR,
 				       CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTORS,
 				       (void *)CONFIG_SYS_SPL_ARGS_ADDR)) {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		printf("mmc args blk read error\n");
+#endif
 		return -1;
 	}
 
@@ -96,9 +114,11 @@
 	err = file_fat_read(filename, (u8 *)spl_image.load_addr, 0);
 
 end:
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 	if (err <= 0)
 		printf("spl: error reading image %s, err - %d\n",
 		       filename, err);
+#endif
 
 	return (err <= 0);
 }
@@ -111,8 +131,10 @@
 	err = file_fat_read(CONFIG_SPL_FAT_LOAD_ARGS_NAME,
 			    (void *)CONFIG_SYS_SPL_ARGS_ADDR, 0);
 	if (err <= 0) {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		printf("spl: error reading image %s, err - %d\n",
 		       CONFIG_SPL_FAT_LOAD_ARGS_NAME, err);
+#endif
 		return -1;
 	}
 
@@ -132,13 +154,17 @@
 	/* We register only one device. So, the dev id is always 0 */
 	mmc = find_mmc_device(0);
 	if (!mmc) {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		puts("spl: mmc device not found!!\n");
+#endif
 		hang();
 	}
 
 	err = mmc_init(mmc);
 	if (err) {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		printf("spl: mmc init failed: err - %d\n", err);
+#endif
 		hang();
 	}
 
@@ -157,7 +183,9 @@
 		err = fat_register_device(&mmc->block_dev,
 					  CONFIG_SYS_MMC_SD_FAT_BOOT_PARTITION);
 		if (err) {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 			printf("spl: fat register err - %d\n", err);
+#endif
 			hang();
 		}
 
@@ -167,7 +195,9 @@
 		err = mmc_load_image_fat(mmc, CONFIG_SPL_FAT_LOAD_PAYLOAD_NAME);
 #endif
 	} else {
+#ifdef CONFIG_SPL_LIBCOMMON_SUPPORT
 		puts("spl: wrong MMC boot mode\n");
+#endif
 		hang();
 	}
 
